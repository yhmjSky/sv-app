# GitLab CI/CD 配置（精简版）
# 仅执行自动数据库设置与配置提交，不进行依赖安装与构建

stages:
  - setup

variables:
  NODE_VERSION: "20"
  GIT_DEPTH: 1
  GIT_STRATEGY: clone

# 单一作业：按需（schedule/web/api/trigger）执行数据库自动设置
database-setup:
  stage: setup
  image: node:${NODE_VERSION}
  timeout: 30m
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "api"
    - if: $CI_PIPELINE_SOURCE == "trigger"
  variables:
    SETUP_YEAR: ""
    SETUP_MONTH: ""
    DRY_RUN: "false"
    # 可选：自定义 GitLab HTTP 基础地址（包含协议和端口），例如 http://192.168.8.210:6080
    GITLAB_HTTP_URL: ""
  before_script:
    - echo "🚀 Starting database setup job..."
    - echo "Node.js version:" && node --version
    - echo "Git version:" && git --version
    # 基本环境变量校验（不依赖 npm 包）
    - |
      if [ -z "$CLOUDFLARE_ACCOUNT_ID" ]; then
        echo "❌ CLOUDFLARE_ACCOUNT_ID is not set"; exit 1; fi
    - |
      if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
        echo "❌ CLOUDFLARE_API_TOKEN is not set"; exit 1; fi
    # 配置 Git 身份
    - git config --global user.email "gitlab-ci@${CI_PROJECT_NAMESPACE}.gitlab.local"
    - git config --global user.name "GitLab CI"
  script:
    - |
      echo "🔧 Building arguments..."
      ARGS=""
      if [ -n "$SETUP_YEAR" ]; then ARGS="$ARGS --year $SETUP_YEAR"; fi
      if [ -n "$SETUP_MONTH" ]; then ARGS="$ARGS --month $SETUP_MONTH"; fi
      if [ "$DRY_RUN" = "true" ]; then ARGS="$ARGS --dry-run"; fi
      echo "→ node scripts/auto-setup-database.js $ARGS"
      node scripts/auto-setup-database.js $ARGS
    - |
      echo "🔍 Checking for wrangler.jsonc changes..."
      if git diff --quiet -- wrangler.jsonc; then
        echo "ℹ️ No changes in wrangler.jsonc"; echo "HAS_CHANGES=false" > setup.env;
      else
        echo "✅ Configuration changes detected"; echo "HAS_CHANGES=true" > setup.env;
        git add wrangler.jsonc
        if [ "$DRY_RUN" = "true" ]; then
          echo "🔍 Dry run mode - skip commit";
        else
          git commit -m "🤖 Auto-update D1 binding for $(date +'%Y-%m')" -m "Automated database configuration update" || echo "⚠️ Nothing to commit"

          # 推送更改（优先使用 Personal/Project Access Token: GITLAB_TOKEN），失败不使作业失败
          # 兼容自签名或非 443 端口，通过 HTTP 避免 TLS 问题
          BASE_URL="$GITLAB_HTTP_URL"
          if [ -z "$BASE_URL" ]; then
            # 如未显式指定，则默认使用 CI_SERVER_HOST 的 6080 端口（按你的环境示例）
            BASE_URL="http://${CI_SERVER_HOST}:6080"
          fi

          REPO_PATH="${CI_PROJECT_PATH}.git"

          if [ -n "$GITLAB_TOKEN" ]; then
            echo "🔐 Using GITLAB_TOKEN (oauth2) to push"
            git push "http://oauth2:${GITLAB_TOKEN}@${BASE_URL#http://}/${REPO_PATH}" HEAD:${CI_COMMIT_REF_NAME} -o ci.skip || echo "⚠️ 推送失败（oauth2），可能无权限或网络异常"
          else
            echo "🔐 Using CI_JOB_TOKEN to push"
            git push "http://gitlab-ci-token:${CI_JOB_TOKEN}@${BASE_URL#http://}/${REPO_PATH}" HEAD:${CI_COMMIT_REF_NAME} -o ci.skip || echo "⚠️ 推送失败（CI_JOB_TOKEN），可能无权限或网络异常"
          fi
        fi
      fi
  after_script:
    - cat setup.env || true
  # 无缓存、无 artifacts，避免 Runner/Coordinator 500 错误
  cache: {}
